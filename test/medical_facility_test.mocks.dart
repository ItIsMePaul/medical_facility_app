// Mocks generated by Mockito 5.4.6 from annotations
// in medical_facility_app/test/medical_facility_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:medical_facility_app/src/entities/facility.dart' as _i5;
import 'package:medical_facility_app/src/entities/validation_result.dart'
    as _i2;
import 'package:medical_facility_app/src/repository/facilities_repository.dart'
    as _i3;
import 'package:medical_facility_app/src/services/report_service_interface.dart'
    as _i7;
import 'package:medical_facility_app/src/services/validation_service_interface.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValidationResult_0 extends _i1.SmartFake
    implements _i2.ValidationResult {
  _FakeValidationResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FacilitiesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFacilitiesRepository extends _i1.Mock
    implements _i3.FacilitiesRepository {
  MockFacilitiesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> addFacility(_i5.Facility? facility) =>
      (super.noSuchMethod(
            Invocation.method(#addFacility, [facility]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i5.Facility?> getFacilityByID(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getFacilityByID, [id]),
            returnValue: _i4.Future<_i5.Facility?>.value(),
          )
          as _i4.Future<_i5.Facility?>);

  @override
  _i4.Future<List<_i5.Facility>> getAllFacilities() =>
      (super.noSuchMethod(
            Invocation.method(#getAllFacilities, []),
            returnValue: _i4.Future<List<_i5.Facility>>.value(<_i5.Facility>[]),
          )
          as _i4.Future<List<_i5.Facility>>);

  @override
  _i4.Future<bool> updateFacility(_i5.Facility? facility) =>
      (super.noSuchMethod(
            Invocation.method(#updateFacility, [facility]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> deleteFacility(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFacility, [id]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i5.Facility?> facilityExists(String? name, String? address) =>
      (super.noSuchMethod(
            Invocation.method(#facilityExists, [name, address]),
            returnValue: _i4.Future<_i5.Facility?>.value(),
          )
          as _i4.Future<_i5.Facility?>);
}

/// A class which mocks [ValidationServiceInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockValidationServiceInterface extends _i1.Mock
    implements _i6.ValidationServiceInterface {
  MockValidationServiceInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValidationResult validateNotEmpty({
    required String? value,
    String? fieldName = 'Variable',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validateNotEmpty, [], {
              #value: value,
              #fieldName: fieldName,
            }),
            returnValue: _FakeValidationResult_0(
              this,
              Invocation.method(#validateNotEmpty, [], {
                #value: value,
                #fieldName: fieldName,
              }),
            ),
          )
          as _i2.ValidationResult);

  @override
  _i2.ValidationResult validatePositiveInt({
    required int? value,
    String? fieldName = 'Variable',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validatePositiveInt, [], {
              #value: value,
              #fieldName: fieldName,
            }),
            returnValue: _FakeValidationResult_0(
              this,
              Invocation.method(#validatePositiveInt, [], {
                #value: value,
                #fieldName: fieldName,
              }),
            ),
          )
          as _i2.ValidationResult);

  @override
  _i2.ValidationResult validateBeds({
    required int? total,
    required int? available,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validateBeds, [], {
              #total: total,
              #available: available,
            }),
            returnValue: _FakeValidationResult_0(
              this,
              Invocation.method(#validateBeds, [], {
                #total: total,
                #available: available,
              }),
            ),
          )
          as _i2.ValidationResult);

  @override
  _i4.Future<_i2.ValidationResult> validateUniqueness({
    required String? name,
    required String? address,
    String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validateUniqueness, [], {
              #name: name,
              #address: address,
              #id: id,
            }),
            returnValue: _i4.Future<_i2.ValidationResult>.value(
              _FakeValidationResult_0(
                this,
                Invocation.method(#validateUniqueness, [], {
                  #name: name,
                  #address: address,
                  #id: id,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.ValidationResult>);
}

/// A class which mocks [ReportServiceInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportServiceInterface extends _i1.Mock
    implements _i7.ReportServiceInterface {
  MockReportServiceInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double calculateOccupancy({required _i5.Facility? facility}) =>
      (super.noSuchMethod(
            Invocation.method(#calculateOccupancy, [], {#facility: facility}),
            returnValue: 0.0,
          )
          as double);

  @override
  List<_i5.Facility> filterByAvailableBeds({
    required List<_i5.Facility>? facilities,
    required int? minAvailable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#filterByAvailableBeds, [], {
              #facilities: facilities,
              #minAvailable: minAvailable,
            }),
            returnValue: <_i5.Facility>[],
          )
          as List<_i5.Facility>);

  @override
  List<_i5.Facility> filterByOccupancy({
    required List<_i5.Facility>? facilities,
    double? minOccupancy = 0.0,
    double? maxOccupancy = 100.0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#filterByOccupancy, [], {
              #facilities: facilities,
              #minOccupancy: minOccupancy,
              #maxOccupancy: maxOccupancy,
            }),
            returnValue: <_i5.Facility>[],
          )
          as List<_i5.Facility>);

  @override
  List<_i5.Facility> sortFacilities({
    required List<_i5.Facility>? facilities,
    required _i7.SortBy? criteria,
    bool? ascending = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sortFacilities, [], {
              #facilities: facilities,
              #criteria: criteria,
              #ascending: ascending,
            }),
            returnValue: <_i5.Facility>[],
          )
          as List<_i5.Facility>);
}
